/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk {
    release-after-ms = <750>;
    quick-release;
};

#define MAIN_L   0
#define QWERTY_L 1
#define SYM_L    2
#define NAV_L    3
#define FUN_L    4
#define NUM_L    5
#define BOARD_L  6

#define SW_LANG LA(LSHFT)
#define MY_PSCRN LS(LC(PSCRN))
#define MY_COPY LC(INSERT)
#define MY_PASTE LS(INSERT)

/ {
    combos {
        compatible = "zmk,combos";

    // shortcut
    #define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT) \
          combo_##NAME { \
            timeout-ms = <TIMEOUT>; \
            bindings = <BINDINGS>; \
            key-positions = <KEYPOS>; \
          };

        /*                KEY POSITIONS

          ╭────────────────────╮ ╭────────────────────╮
          │  0   1   2   3   4 │ │  5   6   7   8   9 │
          │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
          │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
          ╰───────────╮ 30  31 │ │ 32  33 ╭───────────╯
                      ╰────────╯ ╰────────╯        */

        COMBO(left_parenthesis, &kp LPAR, 2 3, 50)
        COMBO(right_parenthesis, &kp RPAR, 3 4, 50)

        COMBO(left_enter, &kp ENTER, 11 12, 50)
        COMBO(escape, &kp ESCAPE, 21 22, 50)

        COMBO(main_layer, &to MAIN_L, 10 11 12 13, 100)
        COMBO(qwerty_layer, &to QWERTY_L, 0 1 2 3, 100)
        COMBO(number_layer, &mo NUM_L, 30 31, 100)
        COMBO(board_layer, &mo BOARD_L, 26 27 28 29, 100)
    };

    behaviors {
        lhm: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            // hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
            hold-trigger-key-positions    = <5 6 7 8 9 10 11 12 13 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
        };

        rhm: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            // hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 35>;
            hold-trigger-key-positions    = <0 1 2 3 4 10 11 12 13 14 16 17 18 19 20 21 22 23 24 30 31 32 33 34 35>;
        };

        base_lt: base_layer_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "BASE_LAYER_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <50>;
            global-quick-tap;
            bindings = <&mo>, <&kp>;
        };

    };

	keymap {
		compatible = "zmk,keymap";

        // MAIN
		main_layer {
			bindings = <
                   &lhm LC(LSHFT) Q &kp W        &kp F         &kp P                &lhm RALT B             &lhm RALT J             &kp L               &kp U                   &kp Y           &mt RC(RSHFT) SEMICOLON
                   &lhm LSHFT A     &lhm LALT R  &kp S         &kp T                &kp G                   &kp M                   &kp N               &kp E                   &kp I           &rhm RSHFT O
                   &lhm  LCTRL Z    &kp X        &kp C         &kp D                &lhm LGUI V             &rhm LGUI K             &kp H               &kp COMMA               &kp DOT         &mt RCTRL SLASH
				 /*&                &*/                        &base_lt SYM_L SPACE &mt LCTRL TAB           &base_lt FUN_L ENTER    &base_lt NAV_L BSPC                       /*&               &*/
			>;  
		};

		qwerty_layer {
			bindings = < 
                   &trans           &trans       &kp E         &kp R                &lhm RALT T             &lhm RALT Y             &kp U               &kp I                   &kp O           &rhm RC(RSHFT) P
                   &trans           &lhm LALT S  &kp D         &kp F                &kp G                   &kp H                   &kp J               &kp K                   &kp L           &rhm RSHFT SEMICOLON
                   &trans           &trans       &trans        &kp V                &lhm LGUI B             &rhm LGUI N             &kp M               &trans                  &trans          &trans
				 /*&                &*/                        &trans               &trans                  &trans                  &trans                                    /*&               &*/
			>;      
		};

		sym_layer {
			bindings = <
                   &lhm LA(F4) N0   &kp N9       &kp N8        &kp N7               &kp N6                  &kp CARET               &kp AMPS            &kp AT                  &kp HASH        &kp DLLR
                   &lhm LSHFT N1    &lhm LALT N2 &kp N3        &kp N4               &kp N5                  &kp GRAVE               &kp MINUS           &kp STAR                &kp EQUAL       &rhm LSHFT APOS 
                   &kp BSPC         &kp DEL      &kp LPAR      &kp RPAR             &kp ENTER               &kp PRCNT               &kp LBKT            &kp RBKT                &kp EXCL        &kp BSLH
				 /*&                &*/                        &trans               &trans                  &trans                  &trans                                    /*&               &*/
		   	>;
		};

		nav_layer {
			bindings = <
                   &trans           &kp PSCRN    &kp MY_COPY   &kp MY_PSCRN         &kp MY_PASTE            &kp INSERT              &kp K_CMENU         &kp UP                  &kp PAGE_UP     &kp CAPS
                   &kp LSHFT        &kp LA(LS(LEFT)) &kp C_PP  &kp LA(LS(RIGHT))    &kp DEL                 &kp HOME                &kp LEFT            &kp DOWN                &kp RIGHT       &rhm RSHFT END
                   &trans           &kp C_PREV   &kp C_MUTE    &kp C_VOL_DN         &kp UNDER               &kp BACKSPACE           &kp DELETE          &kp SW_LANG             &kp PAGE_DOWN   &trans
				 /*&                &*/                        &trans               &trans                  &trans                  &trans                                    /*&               &*/
			>; 
		};

		function_layer {
			bindings = <
                   &kp PAUSE_BREAK  &kp PSCRN    &kp SLCK      &kp F11              &kp F12                 &trans                  &kp LC(LA(DEL))     &trans                  &trans          &trans
                   &kp F1           &kp F2       &kp F3        &kp F4               &kp F5                  &trans                  &trans              &mt LG(LS(S)) PSCRN     &trans          &trans
                   &kp F6           &kp F7       &kp F8        &kp F9               &kp F10                 &trans                  &trans              &trans                  &trans          &trans
				 /*&                &*/                        &trans               &trans                  &trans                  &trans                                    /*&               &*/
			>;
		};

		num_layer {
			bindings = <
                   &kp Q            &kp M        &kp F         &kp P                &kp T                   &kp KP_NUMLOCK          &kp KP_N7           &kp KP_N8               &kp KP_N9         &kp KP_ENTER
                   &kp N1           &kp N2       &kp N3        &kp N4               &kp N5                  &kp KP_MULTIPLY         &kp KP_N4           &kp KP_N5               &kp KP_N6         &kp KP_PLUS
                   &kp Z            &kp ESC      &kp C         &kp S                &kp B                   &kp KP_DOT              &kp KP_N1           &kp KP_N2               &kp KP_N3         &kp KP_SLASH
				 /*&                &*/                        &kp LALT             &trans                  &trans                  &kp KP_N0                                 /*&                 &*/
			>;
		};

		board_layer {
			bindings = <
                   &bt BT_SEL 0     &bt BT_SEL 1 &bt BT_SEL 2  &bt BT_SEL 3         &bt BT_SEL 4            &trans                  &trans              &trans                  &trans          &trans
                   &trans           &trans       &trans        &trans               &trans                  &trans                  &trans              &trans                  &trans          &trans
                   &bt BT_PRV       &bt BT_NXT   &bt BT_CLR    &trans               &bootloader             &bootloader             &trans              &trans                  &trans          &trans
				 /*&                &*/                        &trans               &trans                  &trans                  &trans                                    /*&               &*/
			>;
		};
	};
};
