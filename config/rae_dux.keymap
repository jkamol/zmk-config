/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

&sk {
    release-after-ms = <750>;
    quick-release;
};

&sl {
    release-after-ms = <3000>;
};

&mt {
    flavor = "balanced";
    tapping-term-ms = <200>;
};

&key_repeat {
    usage-pages = <HID_USAGE_KEY HID_USAGE_CONSUMER>;
};

// Mouse move
&mmv {    
        time-to-max-speed-ms = <1000>;
        acceleration-exponent=<1>;
};
// Mouse wheel
&mwh {    
        time-to-max-speed-ms = <2000>;
        acceleration-exponent=<0>;
}; 

#define MMV_UP MOVE_VERT(-1600)
#define MMV_DN MOVE_VERT(1600)
#define MMV_LT MOVE_HOR(-1600)
#define MMV_RT MOVE_HOR(1600)
#define MWH_UP SCROLL_VERT(20)
#define MWH_DN SCROLL_VERT(-20)
#define MWH_LT SCROLL_HOR(-20)
#define MWH_RT SCROLL_HOR(20)

#define MAIN_L   0
#define QWERTY_L 1
#define SYM_L    2
#define NAV_L    3
#define NUMROW_L 4
#define FN_L     5
#define NUMPAD_L 6
#define BOARD_L  7
#define MIRROR_L 8

#define SW_LANG LA(LSHFT)
#define TASK_MNG LC(LS(ESC))

#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24  // left-hand keys
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29  // right-hand keys
#define THUMBS 30 31 32 33 34 35                        // thumb keys
#define EXTRA_L 2 3 4 12 13 14 22 23 24                 // extra left-hand keys
#define EXTRA_R 5 6 7 15 16 17 25 26 27                 // extra right-hand keys

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <SYM_L NAV_L>;
            then-layer = <NUMROW_L>;
        };
    };

    combos {
        compatible = "zmk,combos";

    // shortcut
    #define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT) \
          combo_##NAME { \
            timeout-ms = <TIMEOUT>; \
            bindings = <BINDINGS>; \
            key-positions = <KEYPOS>; \
          };

        /*                KEY POSITIONS

          ╭────────────────────╮ ╭────────────────────╮
          │  0   1   2   3   4 │ │  5   6   7   8   9 │
          │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
          │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
          ╰───────╮ 30  31  32 │ │ 33  34  35 ╭───────╯
                  ╰────────────╯ ╰────────────╯        */


        COMBO(enter, &kp ENTER, 11 12, 30)
        COMBO(escape, &kp ESCAPE, 1 2, 30)
        COMBO(swlang, &kp SW_LANG, 10 11, 30)

        COMBO(board_layer_l, &sl BOARD_L, 20 21 22 23, 100)
        COMBO(board_layer_r, &sl BOARD_L, 26 27 28 29, 100)
        COMBO(function_layer_tg, &tog FN_L, 15 16 25 26, 50)
        COMBO(main_layer, &to MAIN_L, 10 11 12 13, 100)
        COMBO(mirror_layer_mo, &mo MIRROR_L, 30 31, 30)
        COMBO(numpad_layer_mo, &mo NUMPAD_L, 13 23, 50)
        COMBO(numpad_layer_tg, &tog NUMPAD_L, 13 14 23 24, 50)
        COMBO(numrow_layer_mo, &mo NUMROW_L, 31 34, 50)
        COMBO(qwerty_layer, &to QWERTY_L, 0 1 2 3, 100)
    };

    behaviors {
        hml: home-row-left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <50>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R EXTRA_L THUMBS>;
        };
        hmr: home-row-right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <50>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L EXTRA_R THUMBS>;
        };
        mtl: mod-tap-left {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <0>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
        };
        mtr: mod-tap-right {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <0>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // MAIN
        main_layer {
            bindings = <
                   &mtl LC(LSHFT) Q &kp W        &kp F         &kp P                &mtl RALT B             /**/ &mtr RALT J             &kp L               &kp U                   &kp Y           &mtr RC(RSHFT) APOS
                   &hml LSHFT A     &hml LALT R  &kp S         &kp T                &kp G                   /**/ &kp M                   &kp N               &kp E                   &kp I           &hmr RSHFT O
                   &mt LCTRL Z      &kp X        &kp C         &kp D                &mtl LGUI V             /**/ &mtr RGUI K             &kp H               &kp COMMA               &kp DOT         &mt RCTRL SLASH
                 /*&                &*/          &mt LCTRL TAB &lt SYM_L SPACE      &kp BSPC                /**/ &none                   &lt NAV_L BSPC      &lt FN_L ENTER        /*&               &*/
            >;  
        };

        qwerty_layer {
            bindings = < 
                   &kp Q            &kp W        &kp E         &kp R                &kp T                   /**/ &kp Y                   &kp U               &kp I                   &kp O           &kp P
                   &kp A            &kp S        &kp D         &kp F                &kp G                   /**/ &kp H                   &kp J               &kp K                   &kp L           &kp SEMICOLON
                   &kp Z            &kp X        &kp C         &kp V                &kp B                   /**/ &kp N                   &kp M               &kp COMMA               &kp DOT         &kp SLASH
                 /*&                &*/          &kp TAB       &kp SPACE            &trans                  /**/ &none                   &kp BSPC            &kp ENTER             /*&               &*/
            >;      
        };

        sym_layer {
            bindings = <
                   &mt LA(F4) N6    &kp N7       &mt TASK_MNG N8 &kp N9             &mt LC(LA(DEL)) N0      /**/ &mtr RALT CARET         &kp AMPS            &kp AT                  &kp HASH        &kp DLLR
                   &mt LSHFT N1     &mt LALT N2  &kp N3        &kp N4               &kp N5                  /**/ &kp GRAVE               &kp MINUS           &kp STAR                &kp EQUAL       &mt RSHFT SEMICOLON
                   &kp LCTRL        &kp BSPC     &mt LG(LS(S)) PSCRN &kp DELETE     &mt LGUI LC(Y)          /**/ &kp PRCNT               &kp LBKT            &kp RBKT                &kp EXCL        &kp BSLH
                 /*&                &*/          &mo FN_L      &trans               &trans                  /**/ &none                   &trans              &trans                /*&               &*/
               >;
        };

        nav_layer {
            bindings = <
                   &none            &mwh MWH_UP  &mmv MMV_UP   &mkp MCLK            &kp LALT                /**/ &kp INSERT              &kp K_CMENU         &kp UP                  &kp PAGE_UP     &kp CAPS
                   &kp LSHFT        &mmv MMV_LT  &mmv MMV_DN   &mmv MMV_RT          &none                   /**/ &kp HOME                &kp LEFT            &kp DOWN                &kp RIGHT       &mt RSHFT END
                   &kp LCTRL        &mwh MWH_DN  &mwh MWH_LT   &mwh MWH_RT          &kp LGUI                /**/ &kp BACKSPACE           &kp DELETE          &kp SW_LANG             &kp PAGE_DOWN   &kp RCTRL
                 /*&                &*/          &mkp RCLK     &mkp LCLK            &trans                  /**/ &none                   &trans              &kp LALT              /*&               &*/
            >; 
        };

        numrow_layer {
            bindings = <
                   &kp EXCL         &kp AT       &kp HASH      &kp DLLR             &kp PRCNT               /**/ &kp CARET               &kp AMPS            &kp STAR                &kp LPAR        &kp RPAR
                   &mt LSHFT N1     &kp N2       &kp N3        &kp N4               &kp N5                  /**/ &kp N6                  &kp N7              &kp N8                  &kp N9          &mt RSHFT N0
                   &kp LC(Z)        &kp LC(X)    &kp LC(C)     &kp LC(V)            &kp LC(Y)               /**/ &kp BACKSPACE           &kp DELETE          &kp COMMA               &kp DOT         &mt RCTRL SLASH
                 /*&                &*/          &trans        &trans               &trans                  /**/ &none                   &trans              &trans                /*&               &*/
               >;
        };

        function_layer {
            bindings = <
                   &kp N1           &kp N2       &kp N3        &kp N4               &kp PAUSE_BREAK         /**/ &kp SLCK                &none               &none                   &kp C_VOL_UP    &none
                   &kp F1           &kp F2       &kp F3        &kp F4               &kp F5                  /**/ &kp F11                 &kp C_PREV          &kp C_PP                &kp C_MUTE      &kp C_NEXT
                   &kp F6           &kp F7       &kp F8        &kp F9               &kp F10                 /**/ &kp F12                 &none               &none                   &kp C_VOL_DN    &kp RCTRL
                 /*&                &*/          &trans        &kp LALT             &mo NUMPAD_L            /**/ &none                   &trans              &trans                /*&               &*/
            >;
        };

        numpad_layer {
            bindings = <
                   &kp Q            &kp M        &kp F         &kp P                &kp T                   /**/ &mt KP_NUM KP_MULTIPLY  &kp KP_N7           &kp KP_N8               &kp KP_N9         &kp KP_SUBTRACT
                   &kp N1           &kp N2       &kp N3        &kp N4               &kp N5                  /**/ &kp KP_PLUS             &kp KP_N4           &kp KP_N5               &kp KP_N6         &kp KP_DOT
                   &kp Z            &kp ESC      &kp C         &kp S                &kp B                   /**/ &kp BACKSPACE           &kp KP_N1           &kp KP_N2               &kp KP_N3         &kp KP_DIVIDE
                 /*&                &*/          &trans        &kp LALT             &trans                  /**/ &none                   &trans              &kp KP_N0             /*&                 &*/
            >;
        };

        board_layer {
            bindings = <
                   &none            &none        &none         &none                &none                   /**/ &none                   &none               &out OUT_USB            &out OUT_BLE    &out OUT_TOG
                   &bt BT_SEL 0     &bt BT_SEL 1 &bt BT_SEL 2  &bt BT_SEL 3         &bt BT_SEL 4            /**/ &none                   &none               &none                   &trans          &trans
                   &none            &none        &bt BT_CLR    &bootloader          &none                   /**/ &none                   &bootloader         &none                   &trans          &trans
                 /*&                &*/          &kp LA(LEFT)  &kp LA(RIGHT)        &trans                  /**/ &none                   &trans              &trans                /*&               &*/
            >;
        };

        main_mirror {
            bindings = <
                   &kp APOS         &kp Y        &kp U         &kp L                &kp J                   /**/ &kp B                   &kp P               &kp F                   &kp W           &kp Q
                   &kp O            &kp I        &kp E         &kp N                &kp M                   /**/ &kp G                   &kp T               &kp S                   &kp R           &kp A
                   &kp SLASH        &kp DOT      &kp COMMA     &kp H                &kp K                   /**/ &kp V                   &kp D               &kp C                   &kp X           &kp Z
                 /*&                &*/          &none         &none                &none                   /**/ &none                   &kp SPACE           &kp TAB               /*&               &*/
            >;  
        };

    };
};
